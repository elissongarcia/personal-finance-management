spring:
  application:
    name: personal-finance-management
  datasource:
    url: jdbc:postgresql://localhost:5432/personal_finance
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

axon:
  eventhandling:
    processors:
      default:
        mode: subscribing
  serializer:
    general: jackson
    events: jackson
    messages: jackson
  eventstore:
    events:
      table-name: domain_events
    snapshots:
      table-name: snapshots

server:
  port: 8080
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,auditevents
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    org.axonframework: INFO
    com.financemanagement: DEBUG
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:your-256-bit-secret-key-here-make-it-long-and-secure}
    expiration: 86400000 # 24 hours
  rate-limit:
    requests-per-minute: 100
    burst-capacity: 200
  encryption:
    key: ${ENCRYPTION_KEY:your-256-bit-encryption-key-here-make-it-long-and-secure}
    salt: ${ENCRYPTION_SALT:your-encryption-salt-here-make-it-long-and-secure}
  oauth2:
    issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8080}
    jwk-set-uri: ${OAUTH2_JWK_SET_URI:http://localhost:8080/.well-known/jwks.json}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://*.yourdomain.com}
    allowed-methods: GET,POST,PUT,PATCH,DELETE,OPTIONS
    allowed-headers: Authorization,Content-Type,X-Requested-With,Accept,Origin
    exposed-headers: X-Total-Count,X-Rate-Limit-Remaining
    allow-credentials: true
    max-age: 3600

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  default-produces-media-type: application/json
  default-consumes-media-type: application/json
  info:
    title: Personal Finance Management API
    description: Comprehensive personal finance management service with event sourcing
    version: 1.0.0
    contact:
      name: Finance Management Team
      email: support@financemanagement.com

# Cache Configuration
cache:
  redis:
    time-to-live: 3600 # 1 hour
    max-entries: 1000 